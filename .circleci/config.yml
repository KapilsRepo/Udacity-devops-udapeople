version: 2.1
## The config file will go through multiple iterations as part of the demo to show case how the project is 
##  built and how it would be taken through various phases of build, test, smoke test and deploy. 
## iteration-1 build front-end and back-end
## iteration-2 test front-end and back-end
## iteration-3 analyse front-end and back-end; generate necessary alerts on email.
## iteration-4 generate alerts using slack
## iteration-5 deploy infrastructure and simulate failure
## iteration-6 deploy infrastructure successfully
## iteration-7 provide status of migration even on kvdb.io to retrieve it 
##
orbs:
  slack: circleci/slack@4.10.1
  python: circleci/python@2.0.3
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end in case of failures
    parameters:
      circlewrkflowid:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.circlewrkflowid>>
            aws s3 rm s3://udapeople-<<parameters.circlewrkflowid>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.circlewrkflowid>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/backend
            npm i
            npm run migrations:revert            
jobs:
  # Exercise: Creating a Simple Workflow
  # Exercise: Environment Variables
  # Exercise: Reusable Job Code 
##########################
#### PRINT GREETINGS #####
########################## 
  print_greetings:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - run: echo Welcome to UdaPeople!
      - run: echo ${CIRCLE_WORKFLOW_ID}    
##########################
#### BUILD FRONT-END #####
##########################       
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          # Add code here to build front-end build
          command: |
            cd frontend
            npm install
            npm run build            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
##########################
#### BUILD BACK-END ######
##########################         
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          # Add code here to build backend-end build
          command: |
             cd backend
             npm install
             npm run build            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1          
##########################
#### TEST FRONT-END ######
##########################  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:   
      - checkout      
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
             cd frontend
             npm install
             npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
##########################
#### TEST BACK-END ######
##########################  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end test
          command: |
              cd backend
              npm install
              npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
##########################
#### SCAN FRONT-END ######
##########################  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front end
          command:  |
              cd frontend
              npm install
              npm audit fix --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1    
  ##########################
  #### SCAN BACK-END #######
  ##########################          
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back end
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
  ##########################
  #### DEPLOY INFRA ########
  ########################## 
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
              yum install -y tar gzip 
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end EC2 IP address to inventory
          command: |
            EC2ip_ADD=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              echo $EC2ip_ADD 

              echo "[web]" > .circleci/ansible/inventory.txt                         
              echo "$EC2ip_ADD" >> .circleci/ansible/inventory.txt
              echo "$EC2ip_ADD" > .circleci/output/backend_ip_num.txt  
              cat   .circleci/ansible/inventory.txt
                               
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/.circleci/output/backend_ip_num.txt
      - destroy-environment:
          circlewrkflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          event: fail
          template: basic_fail_1
      # Here's where you will add some code to rollback on failure 
  ##########################
  #### CONFIG INFRA ########
  ##########################
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11  
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["0c:3a:9d:14:f8:a6:83:48:57:67:e0:13:81:8a:e6:e9"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add openssh-client
            apk add --update curl nodejs npm ansible zip
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            cat ./inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False            
            ansible-playbook -i inventory.txt configure-server.yml
#      - destroy-environment:
#          circlewrkflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          event: fail
  ##########################
  #### RUN MIGRATION #######
  ##########################  
  run-migrations:
    docker:
      - image: circleci/node:14.18.1
#      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [backend-build]      
      - attach_workspace:
          at: ~/  
      - run:          
          name: Run migrations
          command: |            
            cd backend
            npm install
            npm run migrations >> migration_result.txt
            cat migration_result.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/6h9wPbrfcMHffrSixfsDx2/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'
            fi
#      - destroy-environment:
#          circlewrkflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          event: fail
          template: basic_fail_1
     
##########################
#### DEPLOY FRONT-END ####
##########################  
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - run:
          name: Install tar
          command: |
            sudo apt-get update -y
            sudo apt-get install -y tar
      - run:
          name: Get backend url
          working_directory: /home/circleci/project/frontend
          command: |
            sudo chmod -R 777 /usr/local/lib/node_modules
            touch ".env"
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)            
            export API_URL="http://${BACKEND_IP}:3030"

            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL=${API_URL}" >> .env     
            cat .env
      - run:
          name: Deploy frontend objects
          command: |
            echo ENVIRONMENT=production >> frontend/.env
            echo NODE_ENV=production >> frontend/.env          
            cd ~/project/frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive --acl public-read
      - destroy-environment:
          circlewrkflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          event: fail
          template: basic_fail_1
     
##########################
#### DEPLOY BACK-END ####
##########################    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["0c:3a:9d:14:f8:a6:83:48:57:67:e0:13:81:8a:e6:e9"]
      - attach_workspace:
          at: /~     
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client tar gzip nodejs npm
            pip install awscli 
      - run:
          name: Deploy backend
          command: |
            echo ENVIRONMENT=production >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            npm install
            npm run build
            cp package* ./dist
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt 
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      - destroy-environment:
          circlewrkflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  front-end-smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi 
#      - destroy-environment:
#          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#      - revert-migrations:
#          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  back-end-smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)
            export API_URL="http://${BACKEND_AWS_PUBLIC_IP}:3030"
            echo ${API_URL}
            if curl ${API_URL}/api/status | grep "ok"
            then
              return 0
            else
              return 1
            fi


##########################
#### DEFINE WORKFLOW  #####
##########################             
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - front-end-smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - back-end-smoke-test:
          requires: [front-end-smoke-test]