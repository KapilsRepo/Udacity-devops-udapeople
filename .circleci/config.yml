version: 2.1
## The config file will go through multiple iterations as part of the demo to show case how the project is 
##  built and how it would be taken through various phases of build, test, smoke test and deploy. 
## iteration-1 build front-end and back-end
## iteration-2 test front-end and back-end
## iteration-3 analyse front-end and back-end; generate necessary alerts on email.
## iteration-4 generate alerts using slack
## iteration-5 deploy infrastructure and simulate failure
## iteration-6 deploy infrastructure successfully
## iteration-7 provide status of migration even on kvdb.io to retrieve it later.add
orbs:
  slack: circleci/slack@4.10.1
  python: circleci/python@2.0.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end in case of failures
    parameters:
      circlewrkflowid:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.circlewrkflowid>>
            aws s3 rm s3://udapeople-<<parameters.circlewrkflowid>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.circlewrkflowid>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          # Add code here to build front-end build
          command: |
            cd frontend
            npm install
            npm run build            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          # Add code here to build backend-end build
          command: |
             cd backend
             npm install
             npm run build            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1          

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:   
      - checkout      
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
             cd frontend
             npm install
             npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end test
          command: |
              cd backend
              npm install
              npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front end
          command:  |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1    
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back end
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
          
#  deploy-dependencies:
#    docker:
#      - image: python:3.7-alpine3.11
#    steps:
#      - checkout
#      - run:
#          name: Install Dependencies
#          command: |
#              apk add --update curl tar
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli      # Docker image here that supports AWS CLI
#      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
              yum install -y tar gzip 
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end EC2 IP address to inventory
          command: |
            EC2ip_ADD=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              echo $EC2ip_ADD
              echo "[all]" > .circleci/ansible/inventory.txt
              echo "$EC2ip_ADD"
              echo "$EC2ip_ADD" >> .circleci/ansible/inventory.txt
              echo "$IP_ADDRESS" > .circleci/output/backend_api_ip.txt                   
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/.circleci/output/backend_api_ip.txt
      - destroy-environment:
          circlewrkflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          event: fail
          template: basic_fail_1
      # Here's where you will add some code to rollback on failure 
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11      
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["de:16:25:3d:45:09:52:8c:35:bb:75:6a:08:8c:67:a5"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update curl nodejs npm ansible zip
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook -i ./inventory.txt configure-server.yml
      - destroy-environment:
          circlewrkflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          event: fail
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
#      - image: python:3.7-alpine3.11
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - run:
          name: Install key dependencies in the docker
          command: |
#            pip install awscli
            apk add --update curl nodejs npm
      - attach_workspace:
          at: ~/  
      - run:
          name: Install additional dependencies
          command: |          
            cd backend            
            cp .env.sample .env
      - run:          
          name: Run migrations
          command: |
            #!/bin/bash -eo pipefail
            cd backend
            npm install
            npm audit --audit-level=critical
            npm run migrations >> migration_result.txt
      - run:
          name: display results
          command: |
            cd backend
            cat migration_result.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/6h9wPbrfcMHffrSixfsDx2/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          circlewrkflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          event: fail
          template: basic_fail_1
     # Here's where you will add some code to rollback on failure     

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm ansible
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=`cat .circleci/output/backend_api_ip.txt`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd ~/project/frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ~/project/frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive --acl public-read
      - destroy-environment:
          circlewrkflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          event: fail
          template: basic_fail_1
      # Here's where you will add some code to rollback on failure      
 
workflows:
  default:
    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend] 
#      - scan-frontend:
#          requires: [build-frontend]    
#      - scan-backend:
#          requires: [build-backend]
#      - deploy-dependencies:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#      - deploy-infrastructure:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [main]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
      - run-migrations
#          requires: [configure-infrastructure]              